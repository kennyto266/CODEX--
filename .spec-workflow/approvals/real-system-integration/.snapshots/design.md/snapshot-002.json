{
  "id": "snapshot_1758856998031_ykge96qav",
  "approvalId": "approval_1758856995289_3jbyg0aus",
  "approvalTitle": "真实系统集成技术设计文档",
  "version": 2,
  "timestamp": "2025-09-26T03:23:18.031Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# 真实系统集成设计文档\r\n\r\n## 概述\r\n\r\n本设计文档描述了如何将现有的港股量化交易AI Agent演示系统扩展为真实可用的生产级系统。该系统将集成三个现有项目：StockBacktest回测引擎、黑人RAW DATA数据源和CURSOR CLI Telegram Bot，创建一个完整的量化交易解决方案。\r\n\r\n## 指导文档对齐\r\n\r\n### 技术标准 (tech.md)\r\n设计遵循现有的微服务架构模式、事件驱动通信和模块化设计原则，确保系统的高可用性、可扩展性和可维护性。\r\n\r\n### 项目结构 (structure.md)\r\n实现将遵循现有的分层架构：核心层(src/core)、代理层(src/agents)、数据层(src/models)、服务层(src/services)和仪表板层(src/dashboard)。\r\n\r\n## 代码重用分析\r\n\r\n### 现有组件利用\r\n- **AI Agent架构**: 扩展现有的7个AI Agent，从模拟数据转向真实数据驱动\r\n- **消息队列系统**: 重用现有的Redis消息队列进行Agent间通信\r\n- **仪表板框架**: 扩展现有的Web仪表板，集成真实数据展示\r\n- **数据模型**: 重用现有的Pydantic数据模型，扩展支持真实数据格式\r\n- **监控系统**: 重用现有的性能监控和告警系统\r\n\r\n### 集成点\r\n- **StockBacktest项目**: 集成回测引擎作为策略验证和绩效计算的核心\r\n- **黑人RAW DATA项目**: 作为主要数据源，提供实时和历史市场数据\r\n- **CURSOR CLI项目**: 集成Telegram Bot作为用户交互和信号输出接口\r\n- **现有数据库**: 扩展现有数据模型以支持真实交易数据\r\n\r\n## 架构\r\n\r\n### 系统架构图\r\n\r\n```mermaid\r\ngraph TB\r\n    subgraph \"数据层\"\r\n        A[黑人RAW DATA] --> B[数据适配器]\r\n        C[StockBacktest] --> D[回测引擎接口]\r\n    end\r\n    \r\n    subgraph \"核心服务层\"\r\n        B --> E[数据服务]\r\n        D --> F[策略验证服务]\r\n        E --> G[AI Agent协调器]\r\n        F --> G\r\n        G --> H[消息队列]\r\n    end\r\n    \r\n    subgraph \"AI Agent层\"\r\n        H --> I[量化分析师]\r\n        H --> J[量化交易员]\r\n        H --> K[投资组合经理]\r\n        H --> L[风险分析师]\r\n        H --> M[数据科学家]\r\n        H --> N[量化工程师]\r\n        H --> O[研究分析师]\r\n    end\r\n    \r\n    subgraph \"输出层\"\r\n        I --> P[Telegram Bot]\r\n        J --> P\r\n        K --> P\r\n        L --> P\r\n        M --> P\r\n        N --> P\r\n        O --> P\r\n        P --> Q[用户通知]\r\n    end\r\n    \r\n    subgraph \"监控层\"\r\n        G --> R[Web仪表板]\r\n        H --> R\r\n        R --> S[实时监控]\r\n    end\r\n```\r\n\r\n### 模块化设计原则\r\n- **单一文件职责**: 每个文件专注于特定的数据源、Agent功能或服务\r\n- **组件隔离**: 创建小型、专注的组件，避免大型单体文件\r\n- **服务层分离**: 分离数据访问、业务逻辑和展示层\r\n- **工具模块化**: 将工具分解为专注的、单一用途的模块\r\n\r\n## 组件和接口\r\n\r\n### 数据适配器组件\r\n- **目的**: 将黑人RAW DATA项目的原始数据转换为系统标准格式\r\n- **接口**: `DataAdapter.get_market_data()`, `DataAdapter.validate_data()`, `DataAdapter.transform_data()`\r\n- **依赖**: 黑人RAW DATA项目的数据文件格式\r\n- **重用**: 现有的数据模型和验证框架\r\n\r\n### 回测引擎接口组件\r\n- **目的**: 集成StockBacktest项目的回测功能\r\n- **接口**: `BacktestInterface.run_backtest()`, `BacktestInterface.get_performance()`, `BacktestInterface.validate_strategy()`\r\n- **依赖**: StockBacktest项目的核心回测引擎\r\n- **重用**: 现有的策略管理和绩效计算框架\r\n\r\n### 真实AI Agent组件\r\n- **目的**: 将模拟AI Agent转换为基于真实数据的智能代理\r\n- **接口**: `RealAgent.analyze_market_data()`, `RealAgent.generate_signals()`, `RealAgent.manage_risk()`\r\n- **依赖**: 真实市场数据和机器学习模型\r\n- **重用**: 现有的Agent基础架构和消息通信系统\r\n\r\n### Telegram Bot集成组件\r\n- **目的**: 集成CURSOR CLI项目的Telegram Bot功能\r\n- **接口**: `TelegramInterface.send_signal()`, `TelegramInterface.send_alert()`, `TelegramInterface.handle_command()`\r\n- **依赖**: CURSOR CLI项目的Bot实现\r\n- **重用**: 现有的消息格式和用户交互模式\r\n\r\n### 实时监控组件\r\n- **目的**: 监控系统性能和交易风险\r\n- **接口**: `Monitor.check_system_health()`, `Monitor.detect_anomalies()`, `Monitor.send_alerts()`\r\n- **依赖**: 系统性能指标和交易数据\r\n- **重用**: 现有的监控框架和告警系统\r\n\r\n## 数据模型\r\n\r\n### 真实市场数据模型\r\n```\r\nRealMarketData:\r\n- symbol: string (股票代码)\r\n- timestamp: datetime (数据时间戳)\r\n- open_price: decimal (开盘价)\r\n- high_price: decimal (最高价)\r\n- low_price: decimal (最低价)\r\n- close_price: decimal (收盘价)\r\n- volume: integer (成交量)\r\n- market_cap: decimal (市值)\r\n- pe_ratio: decimal (市盈率)\r\n- data_source: string (数据源标识)\r\n- quality_score: float (数据质量评分)\r\n```\r\n\r\n### 策略绩效模型\r\n```\r\nStrategyPerformance:\r\n- strategy_id: string (策略ID)\r\n- backtest_period: string (回测期间)\r\n- sharpe_ratio: decimal (夏普比率)\r\n- total_return: decimal (总收益率)\r\n- max_drawdown: decimal (最大回撤)\r\n- win_rate: decimal (胜率)\r\n- volatility: decimal (波动率)\r\n- trades_count: integer (交易次数)\r\n- last_updated: datetime (最后更新时间)\r\n- validation_status: string (验证状态)\r\n```\r\n\r\n### 交易信号模型\r\n```\r\nTradingSignal:\r\n- signal_id: string (信号ID)\r\n- agent_id: string (生成信号的Agent)\r\n- symbol: string (股票代码)\r\n- signal_type: string (信号类型: buy/sell/hold)\r\n- confidence: float (信号置信度)\r\n- target_price: decimal (目标价格)\r\n- stop_loss: decimal (止损价格)\r\n- timestamp: datetime (信号生成时间)\r\n- metadata: dict (附加元数据)\r\n```\r\n\r\n### Telegram消息模型\r\n```\r\nTelegramMessage:\r\n- message_type: string (消息类型: signal/alert/status)\r\n- recipient_id: string (接收者ID)\r\n- content: string (消息内容)\r\n- priority: string (优先级: high/medium/low)\r\n- timestamp: datetime (发送时间)\r\n- delivery_status: string (发送状态)\r\n```\r\n\r\n## 错误处理\r\n\r\n### 错误场景\r\n1. **数据源连接失败**\r\n   - **处理**: 自动切换到备用数据源，记录错误日志，发送告警通知\r\n   - **用户影响**: 用户收到数据源切换通知，系统继续正常运行\r\n\r\n2. **回测引擎异常**\r\n   - **处理**: 暂停策略验证，使用历史绩效数据，触发人工检查\r\n   - **用户影响**: 用户收到回测异常告警，策略使用缓存数据\r\n\r\n3. **AI Agent故障**\r\n   - **处理**: 自动重启故障Agent，切换到备用分析模式\r\n   - **用户影响**: 用户收到Agent故障通知，系统降级运行\r\n\r\n4. **Telegram Bot发送失败**\r\n   - **处理**: 重试发送机制，记录失败消息，使用备用通知方式\r\n   - **用户影响**: 用户可能延迟收到通知，但不会丢失重要信息\r\n\r\n5. **数据质量问题**\r\n   - **处理**: 数据清洗和验证，标记低质量数据，使用插值或历史数据\r\n   - **用户影响**: 用户收到数据质量告警，系统使用备用数据源\r\n\r\n## 测试策略\r\n\r\n### 单元测试\r\n- 数据适配器的数据转换逻辑测试\r\n- AI Agent的核心分析算法测试\r\n- Telegram Bot的消息处理逻辑测试\r\n- 回测引擎接口的集成测试\r\n\r\n### 集成测试\r\n- 数据源到AI Agent的完整数据流测试\r\n- AI Agent到Telegram Bot的信号传输测试\r\n- 回测引擎与策略验证的集成测试\r\n- 错误恢复和故障切换测试\r\n\r\n### 端到端测试\r\n- 从市场数据接收到用户通知的完整流程测试\r\n- 多Agent协作的复杂场景测试\r\n- 高负载下的系统性能测试\r\n- 真实市场数据的处理能力测试\r\n",
  "fileStats": {
    "size": 7798,
    "lines": 215,
    "lastModified": "2025-09-26T03:23:08.474Z"
  },
  "comments": []
}