{
  "id": "snapshot_1758852505072_f9vgoimg7",
  "approvalId": "approval_1758852503199_eot0anxpz",
  "approvalTitle": "Agent仪表板设计文档审批",
  "version": 2,
  "timestamp": "2025-09-26T02:08:25.072Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Agent仪表板设计文档\r\n\r\n## Overview\r\n\r\nAgent仪表板是一个基于Web的实时监控界面，为港股量化交易AI Agent系统提供全面的可视化监控能力。该仪表板将展示每个Agent的详细工作状态、交易策略信息、绩效指标（包括夏普比率）和实时操作控制功能，帮助项目团队优化交易策略和提升系统整体性能。\r\n\r\n## Steering Document Alignment\r\n\r\n### Technical Standards (tech.md)\r\n设计遵循现有的技术标准和架构模式：\r\n- 使用FastAPI作为Web框架，与现有监控仪表板保持一致\r\n- 采用WebSocket实现实时数据推送\r\n- 使用Pydantic进行数据验证和序列化\r\n- 遵循微服务架构和事件驱动设计模式\r\n\r\n### Project Structure (structure.md)\r\n实现将遵循现有的项目组织结构：\r\n- 在`src/dashboard/`目录下创建仪表板相关组件\r\n- 复用现有的数据模型和Agent状态管理\r\n- 与现有的消息队列系统集成\r\n- 保持与现有监控仪表板的兼容性\r\n\r\n## Code Reuse Analysis\r\n\r\n### Existing Components to Leverage\r\n- **MonitoringDashboard**: 扩展现有的性能监控仪表板，添加Agent特定功能\r\n- **AgentCoordinator**: 复用Agent状态管理和健康监控功能\r\n- **MessageQueue**: 利用现有的消息队列系统进行实时数据推送\r\n- **BaseAgent**: 复用Agent状态和统计信息收集机制\r\n- **AgentInfo/SystemMetrics**: 扩展现有的数据模型以包含交易策略信息\r\n\r\n### Integration Points\r\n- **现有监控系统**: 集成到现有的性能监控仪表板中\r\n- **Agent系统**: 通过消息队列与所有Agent进行通信\r\n- **数据存储**: 利用现有的Redis缓存和历史数据存储\r\n- **WebSocket连接**: 复用现有的实时数据推送机制\r\n\r\n## Architecture\r\n\r\nAgent仪表板采用分层架构设计，包含数据层、服务层、API层和表示层，确保模块化和可扩展性。\r\n\r\n### Modular Design Principles\r\n- **Single File Responsibility**: 每个文件处理特定的功能域（Agent状态、策略信息、绩效指标）\r\n- **Component Isolation**: 创建独立可复用的Agent卡片组件和指标展示组件\r\n- **Service Layer Separation**: 分离数据获取、业务逻辑和UI展示层\r\n- **Utility Modularity**: 将通用功能（数据格式化、图表生成）分解为独立模块\r\n\r\n```mermaid\r\ngraph TD\r\n    A[Agent Dashboard Frontend] --> B[Dashboard API Layer]\r\n    B --> C[Agent Data Service]\r\n    B --> D[Strategy Data Service]\r\n    B --> E[Performance Data Service]\r\n    C --> F[Agent Coordinator]\r\n    D --> G[Strategy Manager]\r\n    E --> H[Performance Calculator]\r\n    F --> I[Message Queue]\r\n    G --> I\r\n    H --> I\r\n    I --> J[Redis Cache]\r\n    I --> K[Agent System]\r\n```\r\n\r\n## Components and Interfaces\r\n\r\n### AgentDashboardComponent\r\n- **Purpose:** 主要的仪表板组件，展示所有Agent的状态和关键指标\r\n- **Interfaces:** `get_agent_status()`, `update_agent_display()`, `handle_agent_action()`\r\n- **Dependencies:** AgentDataService, WebSocketManager\r\n- **Reuses:** 现有的MonitoringDashboard HTML模板和样式\r\n\r\n### AgentCardComponent\r\n- **Purpose:** 单个Agent的状态卡片，显示Agent基本信息、状态和快速操作\r\n- **Interfaces:** `render_agent_card()`, `update_status()`, `handle_click()`\r\n- **Dependencies:** AgentInfo数据模型\r\n- **Reuses:** 现有的指标卡片样式和状态指示器\r\n\r\n### StrategyDisplayComponent\r\n- **Purpose:** 展示Agent的交易策略详情和参数\r\n- **Interfaces:** `show_strategy_details()`, `update_strategy_info()`, `render_strategy_chart()`\r\n- **Dependencies:** StrategyDataService\r\n- **Reuses:** 现有的图表渲染功能和数据可视化组件\r\n\r\n### PerformanceMetricsComponent\r\n- **Purpose:** 显示Agent的绩效指标，包括夏普比率、收益、回撤等\r\n- **Interfaces:** `calculate_metrics()`, `render_metrics_chart()`, `update_performance_display()`\r\n- **Dependencies:** PerformanceCalculator, HistoricalDataService\r\n- **Reuses:** 现有的图表库和指标计算逻辑\r\n\r\n### AgentControlComponent\r\n- **Purpose:** 提供Agent控制功能（启动、停止、重启、参数调整）\r\n- **Interfaces:** `start_agent()`, `stop_agent()`, `restart_agent()`, `update_parameters()`\r\n- **Dependencies:** AgentCoordinator, MessageQueue\r\n- **Reuses:** 现有的Agent控制逻辑和确认对话框\r\n\r\n## Data Models\r\n\r\n### AgentDashboardData\r\n```\r\n- agent_id: string\r\n- agent_type: string\r\n- status: AgentStatus\r\n- last_heartbeat: datetime\r\n- current_strategy: StrategyInfo\r\n- performance_metrics: PerformanceMetrics\r\n- system_resources: ResourceUsage\r\n- control_actions: List[ControlAction]\r\n```\r\n\r\n### StrategyInfo\r\n```\r\n- strategy_name: string\r\n- strategy_type: string\r\n- parameters: Dict[string, any]\r\n- backtest_results: BacktestMetrics\r\n- live_performance: LiveMetrics\r\n- last_updated: datetime\r\n- version: string\r\n```\r\n\r\n### PerformanceMetrics\r\n```\r\n- sharpe_ratio: float\r\n- total_return: float\r\n- max_drawdown: float\r\n- volatility: float\r\n- win_rate: float\r\n- profit_factor: float\r\n- trades_count: int\r\n- calculation_date: datetime\r\n```\r\n\r\n### AgentControlAction\r\n```\r\n- action_id: string\r\n- agent_id: string\r\n- action_type: string\r\n- parameters: Dict[string, any]\r\n- status: ActionStatus\r\n- created_at: datetime\r\n- executed_at: datetime\r\n- result: ActionResult\r\n```\r\n\r\n## Error Handling\r\n\r\n### Error Scenarios\r\n1. **Agent连接失败**\r\n   - **Handling:** 显示离线状态，提供重连按钮，记录错误日志\r\n   - **User Impact:** 用户看到Agent离线指示，可以尝试重新连接\r\n\r\n2. **数据获取超时**\r\n   - **Handling:** 显示缓存数据，显示\"数据可能不是最新\"提示\r\n   - **User Impact:** 用户看到稍旧的数据，但有明确的提示信息\r\n\r\n3. **Agent控制操作失败**\r\n   - **Handling:** 显示操作失败消息，提供重试选项，记录详细错误\r\n   - **User Impact:** 用户收到明确的失败反馈，可以重新尝试操作\r\n\r\n4. **WebSocket连接中断**\r\n   - **Handling:** 自动重连机制，显示连接状态，降级到轮询模式\r\n   - **User Impact:** 用户可能看到短暂的数据更新延迟，但系统会自动恢复\r\n\r\n## Testing Strategy\r\n\r\n### Unit Testing\r\n- 测试每个组件的数据处理和渲染逻辑\r\n- 验证Agent状态更新和策略信息显示\r\n- 测试绩效指标计算和图表生成\r\n\r\n### Integration Testing\r\n- 测试与现有Agent系统的集成\r\n- 验证消息队列通信和WebSocket连接\r\n- 测试Agent控制操作的端到端流程\r\n\r\n### End-to-End Testing\r\n- 测试完整的用户交互流程\r\n- 验证实时数据更新和Agent状态变化\r\n- 测试多用户并发访问场景\r\n",
  "fileStats": {
    "size": 6655,
    "lines": 180,
    "lastModified": "2025-09-26T02:08:17.879Z"
  },
  "comments": []
}